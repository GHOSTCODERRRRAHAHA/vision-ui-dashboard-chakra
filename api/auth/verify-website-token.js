// Token verification API for ClarityX
// This serverless function verifies the app tokens generated by website-token.js

const { createClient } = require('@supabase/supabase-js');
const jwt = require('jsonwebtoken');

// Initialize Supabase client with admin privileges
const supabaseUrl = process.env.REACT_APP_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
const supabase = supabaseUrl && supabaseServiceKey ? 
  createClient(supabaseUrl, supabaseServiceKey) : null;

module.exports = async (req, res) => {
  // Enable CORS
  res.setHeader('Access-Control-Allow-Credentials', true);
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version, Authorization');

  // Handle OPTIONS request for CORS preflight
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  // Only allow GET for this endpoint
  if (req.method !== 'GET') {
    return res.status(405).json({ 
      success: false, 
      message: 'Method not allowed' 
    });
  }

  try {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({ 
        success: false, 
        message: 'No token provided' 
      });
    }
    
    const token = authHeader.split(' ')[1];
    
    // Verify the token using the same secret used to create it
    try {
      // In production, use a proper secret key from environment variables
      const decoded = jwt.verify(
        token,
        process.env.JWT_SECRET || 'development-secret-key'
      );
      
      // If we have Supabase configured, verify the user still exists
      if (supabase && decoded.userId) {
        // Verify that the user still exists in Supabase
        const { data: userData, error } = await supabase.auth.admin.getUserById(decoded.userId);
        
        if (error || !userData) {
          return res.status(401).json({ 
            success: false, 
            message: 'User no longer exists or token is invalid' 
          });
        }
        
        // Get user profile and membership data
        const { data: profileData } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', userData.id)
          .single();
          
        const { data: membershipData } = await supabase
          .from('memberships')
          .select('*')
          .eq('user_id', userData.id)
          .single();
        
        // Format membership features
        let features = ['Basic fact-checking'];
        
        if (membershipData?.type === 'Premium') {
          features = [
            'Advanced fact-checking',
            'Unlimited scans',
            'Priority support',
            'Custom reports',
            'AI-powered insights'
          ];
        } else if (membershipData?.type === 'Pro') {
          features = [
            'Advanced fact-checking',
            'Daily scan limit: 50',
            'Standard support',
            'Basic reports'
          ];
        } else {
          features = [
            'Basic fact-checking',
            'Daily scan limit: 10',
            'Community support'
          ];
        }
        
        // Return the verified user data from Supabase
        return res.json({
          success: true,
          user: {
            id: userData.id,
            email: userData.email,
            name: profileData?.full_name || userData.email,
            avatar: profileData?.avatar_url,
            membership: {
              type: membershipData?.type || 'Free',
              since: membershipData?.created_at ? new Date(membershipData.created_at).toLocaleDateString() : new Date().toLocaleDateString(),
              features
            }
          }
        });
      } 
      else {
        // If Supabase is not configured or userId is missing, return the decoded data
        return res.json({
          success: true,
          user: {
            id: decoded.userId || 'unknown-id',
            email: decoded.email || 'user@example.com',
            name: decoded.name || 'ClarityX User',
            membership: {
              type: decoded.role || 'Free',
              since: new Date().toLocaleDateString(),
              features: [
                'Basic fact-checking',
                'Daily scan limit: 10',
                'Community support'
              ]
            }
          }
        });
      }
    } catch (err) {
      // Token is invalid or expired
      return res.status(401).json({ 
        success: false, 
        message: 'Invalid or expired token',
        details: err.message
      });
    }
  } catch (error) {
    console.error('Token verification error:', error);
    return res.status(500).json({ 
      success: false, 
      message: 'Server error during verification',
      details: error.message
    });
  }
}; 